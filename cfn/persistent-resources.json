{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "AWS CloudFormation Template for persistent resources.",

  "Parameters": {
    "VPCCidrBlock": {
      "Description": "CIDR Block Range for VPC",
      "Type": "String",
      "Default": "172.16.0.0/16",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    },
    "PrivateSubnetCidrBlock": {
      "Description": "Private Subnet CIDR Block Range",
      "Type": "String",
      "Default": "172.16.1.0/24",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    },
    "PublicSubnetCidrBlock": {
      "Description": "Public Subnet CIDR Block Range",
      "Type": "String",
      "Default": "172.16.2.0/24",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    }
  },

  "Resources": {
    "VPC": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": {"Ref": "VPCCidrBlock"},
        "Tags": [ {"Key": "Name", "Value": { "Ref": "AWS::StackName"} } ]
      }
    },
    "PrivateSubnet": {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "CidrBlock" : {"Ref": "PrivateSubnetCidrBlock"},
        "VpcId" : {"Ref": "VPC"},
        "Tags": [ {"Key": "Name", "Value": {"Fn::Sub": "${AWS::StackName}-private-subnet" }} ]
      }
    },
    "PublicSubnet": {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "CidrBlock" : {"Ref": "PublicSubnetCidrBlock"},
        "VpcId" : {"Ref": "VPC"},
        "Tags": [ {"Key": "Name", "Value": {"Fn::Sub": "${AWS::StackName}-public-subnet" }} ]
      }
    },
    "InternetGateway": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
        "Tags": [ {"Key": "Name", "Value": { "Ref": "AWS::StackName"} } ]
      }
    },
    "AttachGateway": {
       "Type": "AWS::EC2::VPCGatewayAttachment",
       "Properties": {
         "VpcId": { "Ref": "VPC" },
         "InternetGatewayId": { "Ref": "InternetGateway" }
       }
    },
    "EIP": {
      "Type": "AWS::EC2::EIP",
      "Properties": {
        "Domain": "vpc"
      }
    },
    "NatGateway": {
      "Type": "AWS::EC2::NatGateway",
      "Properties": {
        "AllocationId": {"Fn::GetAtt": ["EIP", "AllocationId"]},
        "SubnetId": {"Ref": "PublicSubnet"}
      }
    },
    "PrivateSubnetRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {"Ref": "VPC"},
        "Tags": [ {"Key": "Name", "Value": { "Ref": "AWS::StackName"} } ]
      }
    },
    "PrivateSubnetRoute": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {"Ref": "PrivateSubnetRouteTable"},
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": {"Ref": "NatGateway"}
      }
    },
    "PrivateRouteTableAssociation": {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "RouteTableId" : {"Ref": "PrivateSubnetRouteTable"},
        "SubnetId" : {"Ref": "PrivateSubnet"}
      }
    },
    "PublicSubnetRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {"Ref": "VPC"},
        "Tags": [ {"Key": "Name", "Value": { "Ref": "AWS::StackName"} } ]
      }
    },
    "PublicSubnetRoute": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {"Ref": "PublicSubnetRouteTable"},
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {"Ref": "InternetGateway"}
      }
    },
    "PublicRouteTableAssociation": {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "RouteTableId" : {"Ref": "PublicSubnetRouteTable"},
        "SubnetId" : {"Ref": "PublicSubnet"}
      }
    },
    "ElasticLoadBalancer": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties": {
        "Subnets": [{ "Ref":"PublicSubnet" }],
        "SecurityGroups": [{"Ref": "ELBSecurityGroup"}],
        "CrossZone": "true",
        "ConnectionSettings" : { "IdleTimeout" : "2000" },
        "Listeners": [ {
          "LoadBalancerPort": "443",
          "InstancePort": "443",
          "Protocol": "TCP"
        }],
        "HealthCheck": {
          "Target": "HTTPS:443/v1/health/checks/key-value",
          "HealthyThreshold": "2",
          "UnhealthyThreshold": "5",
          "Interval": "10",
          "Timeout": "5"
        }
      }
    },

    "ELBSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Limits incoming ELB access",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "443",
            "ToPort": "443",
            "CidrIp": "0.0.0.0/0"
          }
        ],
        "VpcId": { "Ref" : "VPC"}
      }
    }
  },

  "Outputs": {
    "VPCID": {
      "Value": { "Ref": "VPC" },
      "Description": "The ID of the VPC Resource created using this template",
      "Export": {
        "Name": "Key-Value-VPCID"
      }
    },
    "VPCCIDR": {
      "Value": { "Fn::GetAtt": ["VPC", "CidrBlock"] },
      "Description": "The CIDR Block of the VPC Resource",
      "Export": {
        "Name": "Key-Value-VPCCIDR"
      }
    },
    "PublicSubnet": {
      "Value": { "Ref": "PublicSubnet" },
      "Description": "The Subnet Id of the public subnet",
      "Export": {
        "Name": "Key-Value-PublicSubnet"
      }
    },
    "PrivateSubnet": {
      "Value": { "Ref": "PrivateSubnet" },
      "Description": "The Subnet Id of the private subnet",
      "Export": {
        "Name": "Key-Value-PrivateSubnet"
      }
    },
    "EIP": {
      "Value": {"Fn::GetAtt": ["EIP", "AllocationId"]},
      "Description": "The EIP used for the nat gateway"
    },
    "ElbUrl": {
      "Value": { "Fn::Sub": "https://${ElasticLoadBalancer.DNSName}"},
      "Description": "ELB endpoint"
    },
    "ElbName": {
      "Value": {"Ref": "ElasticLoadBalancer"},
      "Description": "Name of the Public ELb",
      "Export": {
        "Name": "Key-Value-ElbName"
      }
    },
    "ElbSecurityGroup": {
      "Value": {"Ref": "ELBSecurityGroup"},
      "Description": "ELB Seucirty Group",
      "Export": {
        "Name": "Key-Value-ElbSecurityGroup"
      }
    }
  }

}

